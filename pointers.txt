POINTERS:
A pointer is a variable whose value is the address of another variable, i.e.,
direct address of the memory location. Like any variable or constant, you must
declare a pointer before you can use it to store any variable address.
The general form of a pointer variable declaration is −

var var_name *var-type

Here, type is the pointer's base type; it must be a valid C data type and var-name
is the name of the pointer variable. The asterisk * you used to declare a pointer
is the same asterisk that you use for multiplication. However, in this statement
the asterisk is being used to designate a variable as a pointer.

Following are the valid pointer declaration −

var ip *int        /* pointer to an integer */
var fp *float32    /* pointer to a float */
The actual data type of the value of all pointers, whether integer, float, or otherwise,
is the same, a long hexadecimal number that represents a memory address.
The only difference between pointers of different data types is the data type of the
variable or constant that the pointer points to.

How to Use Pointers?
There are a few important operations, which we frequently perform with pointers:
(a) we define pointer variables,
(b) assign the address of a variable to a pointer, and
(c) access the value at the address stored in the pointer variable.

All these operations are carried out using the unary operator * that returns the value of the variable located at the address specified by its operand. The following example demonstrates how to perform these operations −

package main

import "fmt"

func main() {
   var a int = 20   /* actual variable declaration */
   var ip *int      /* pointer variable declaration */

   ip = &a  /* store address of a in pointer variable*/

   fmt.Printf("Address of a variable: %x\n", &a  )

   /* address stored in pointer variable */
   fmt.Printf("Address stored in ip variable: %x\n", ip )

   /* access the value using the pointer */
   fmt.Printf("Value of *ip variable: %d\n", *ip )
}

When the above code is compiled and executed, it produces the following result −

Address of var variable: 10328000
Address stored in ip variable: 10328000
Value of *ip variable: 20

GO POINTERS:
Array of Pointers
Before we understand the concept of arrays of pointers, let us consider the following example,
which makes use of an array of 3 integers −

Live Demo
package main

import "fmt"
 
const MAX int = 3
 
func main() {
   a := []int{10,100,200}
   var i int

   for i = 0; i < MAX; i++ {
      fmt.Printf("Value of a[%d] = %d\n", i, a[i] )
   }
}
When the above code is compiled and executed, it produces the following result −

Value of a[0] = 10
Value of a[1] = 100
Value of a2] = 200
There may be a situation when we want to maintain an array, which can store pointers to an int
or string or any other data type available. The following statement declares an array
of pointers to an integer −

var ptr [MAX]*int;
This declares ptr as an array of MAX integer pointers. Thus, each element in ptr,
now holds a pointer to an int value. The following example makes use of three integers,
which will be stored in an array of pointers as follows −

package main

import "fmt"
 
const MAX int = 3
 
func main() {
   a := []int{10,100,200}
   var i int
   var ptr [MAX]*int;

   for  i = 0; i < MAX; i++ {
      ptr[i] = &a[i] /* assign the address of integer. */
   }
   for  i = 0; i < MAX; i++ {
      fmt.Printf("Value of a[%d] = %d\n", i,*ptr[i] )
   }
}
When the above code is compiled and executed, it produces the following result −

Value of a[0] = 10
Value of a[1] = 100
Value of a[2] = 200


POINTER TO POINTER:

A pointer to a pointer is a form of chain of pointers. Normally, a pointer contains
the address of a variable. When we define a pointer to a pointer, the first pointer
contains the address of the second pointer, which points to the location that contains
the actual value as shown below.

Pointer to Pointer in Go
A variable that is a pointer to a pointer must be declared as such.
This is done by placing an additional asterisk in front of its name.
For example, the following statement declares a pointer to a pointer of type int −

var ptr **int;
When a target value is indirectly pointed to by a pointer to a pointer,
accessing that value requires that the asterisk operator be applied twice,
as is shown in the following example −

Live Demo
package main

import "fmt"

func main() {
   var a int
   var ptr *int
   var pptr **int

   a = 3000

   /* take the address of var */
   ptr = &a

   /* take the address of ptr using address of operator & */
   pptr = &ptr

   /* take the value using pptr */
   fmt.Printf("Value of a = %d\n", a )
   fmt.Printf("Value available at *ptr = %d\n", *ptr )
   fmt.Printf("Value available at **pptr = %d\n", **pptr)
}
When the above code is compiled and executed, it produces the following result −

Value of var = 3000
Value available at *ptr = 3000
Value available at **pptr = 3000


PASSING A POINTER TO A FUNCTION
Go programming language allows you to pass a pointer to a function.
To do so, simply declare the function parameter as a pointer type.

In the following example, we pass two pointers to a function and change
the value inside the function which reflects back in the calling function −


package main

import "fmt"

func main() {
   /* local variable definition */
   var a int = 100
   var b int = 200

   fmt.Printf("Before swap, value of a : %d\n", a )
   fmt.Printf("Before swap, value of b : %d\n", b )

   /* calling a function to swap the values.
   * &a indicates pointer to a ie. address of variable a and 
   * &b indicates pointer to b ie. address of variable b.
   */
   swap(&a, &b);

   fmt.Printf("After swap, value of a : %d\n", a )
   fmt.Printf("After swap, value of b : %d\n", b )
}
func swap(x *int, y *int) {
   var temp int
   temp = *x    /* save the value at address x */
   *x = *y      /* put y into x */
   *y = temp    /* put temp into y */
}
When the above code is compiled and executed, it produces the following result −

Before swap, value of a :100
Before swap, value of b :200
After swap, value of a :200
After swap, value of b :100

